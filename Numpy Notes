Objective : Homogeneous multi-dimensional array.

Array in numpy : 
Table of elements with following properties.
1) all elements are of same type
2) indexed by tuples
3) dimension is called axis

properties
-------------------------------------------
Numpy array class is called ndarray or array. It is not same as python array.
It has the following properties.
1) ndarray.ndim
2)ndarray.shape
3)ndarray.size
4)ndarray.dtype
5)ndarray.itemsize
6)ndarray.data  


Array Creation 
-----------------------------------------
a = np.array([2,3,4])
c = np.array( [ [1,2], [3,4] ], dtype=complex )
np.zeros( (3,4) )
np.ones( (2,3,4), dtype=np.int16 ) 
np.empty( (2,3) # uninitialized, output may vary
a = np.arange(15).reshape(3, 5)

When arange is used with floating point arguments, 
it is generally not possible to predict the number of elements obtained, due to the finite floating point precision
np.linspace( 0, 2, 9 )
array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])
>>> x = np.linspace( 0, 2*pi, 100 )        # useful to evaluate function at lots of points
>>> f = np.sin(x)

Printing
---------------------------------------------------
>>> c = np.arange(24).reshape(2,3,4)         # 3d array
>>> print(c)
[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]
 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]]
  
  Force NumPy to print the entire array
  np.set_printoptions(threshold='nan') 
  
  
  
  Basic Operations
  ---------------------------------------------------
  * for dot product 
  np.dot(A,B) for matrix multiplication
  + , - ,** is element wise
  < , == , sin 
  
  Unary operations are implemented as methods in ndarray.. example A.sun(), A.max(), A.min()
  We can appply this along the axis 
  b.sum(axis=0)    
  b.cumsum(axis=1)  # cumulative sum along each row
  
  
  
  Universal Functions
  --------------------------------------------------------
  np.exp(B)
  np.sqrt(B)
  np.add(B, C)
  Other Methods:
  all : Test whether all array elements along a given axis evaluate to True.
  any :Test whether any array element along a given axis evaluates to True.
  apply_along_axis :numpy.apply_along_axis(func1d, axis, arr, *args, **kwargs)
  argmax, 
  argmin, 
  argsort, 
  average, 
  bincount : Count number of occurrences of each value in array of non-negative ints.
            np.bincount(np.array([0, 1, 1, 3, 2, 1, 7]))
            array([1, 3, 1, 1, 0, 0, 0, 1])
  
  ceil, 
  
  clip :Clip (limit) the values in an array.
        rray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
        >>> np.clip(a, 3, 6, out=a)
        array([3, 3, 3, 3, 4, 5, 6, 6, 6, 6])
  
  conj :Return the complex conjugate, element-wise.
  corrcoef :Return Pearson product-moment correlation coefficients.
  cov :Estimate a covariance matrix, given data and weights.Estimate a covariance matrix, given data and weights.
      covariance indicates the level to which two variables vary together.
  cross :Return the cross product of two (arrays of) vectors.
  cumprod :Return the cumulative product of elements along a given axis.
  cumsum, diff, dot, floor, inner, inv, 
  lexsort, max, maximum, mean, median, min, minimum, nonzero, outer, prod, 
  re : This module provides regular expression matching operations similar to those found in Perl.
  round, 
  sort, std, sum, trace, transpose, 
  var: Compute the variance along the specified axis.,
  vdot : Return the dot product of two vectors.
  vectorize :
              def myfunc(a, b):
            ...     "Return a-b if a>b, otherwise return a+b"
            ...     if a > b:
            ...         return a - b
            ...     else:
            ...         return a + b
  
  
  
              >>> vfunc = np.vectorize(myfunc)
              >>> vfunc([1, 2, 3, 4], 2)
              array([3, 4, 1, 2])



Indexing, Slicing and Iterating
---------------------------------------------
b[2,3]
b[0:5, 1]
b[ : ,1]  
b[1:3, : ]                      
b[-1]                                  # the last row. Equivalent to b[-1,:]



for row in b:
...     print(row)


for element in b.flat:
...     print(element)

Shape Manupulation
------------------------------------------------
a.shape
a.ravel()  # returns the array, flattened
a.reshape(6,2)  # returns the array with a modified shape
a.T  # returns the array, transposed


Stacking together different arrays
-----------------------------------------------------
Several arrays can be stacked together along different axes:
np.vstack((a,b))
np.hstack((a,b))
np.column_stack((a,b))
a[:,newaxis]  # This allows to have a 2D columns vector             (Important)
          array([[ 4.],
                 [ 2.]])
                 
np.column_stack((a[:,newaxis],b[:,newaxis]))

For arrays of with more than two dimensions, hstack stacks along their second axes, vstack stacks along their first axes, 
and concatenate allows for an optional arguments giving the number of the axis along which the concatenation should happen.
       
       
       
Splitting one array into several smaller ones
-----------------------------------
vsplit , hsplit

Copies
------------------------------------------
b = a            # no new object is created
>>> b is a           # a and b are two names for the same ndarray object
True

Python passes mutable objects as references, so function calls make no copy.
The view method creates a new array object that looks at the same data.
      >>> c = a.view()
      >>> c is a
      False
      >>> c.base is a                        # c is a view of the data owned by a
      True
Slicing an array returns a view of it


Deep Copy
-------------------------------------------------









